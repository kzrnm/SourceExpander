using System.Collections.Generic;
namespace SourceExpander.Expanded{
public static class ExpandedContainer{
public static IReadOnlyDictionary<string, SourceCode> Files { get; } = new Dictionary<string, SourceCode>{
{"/home/source/Program.cs",SourceCode.FromDictionary(new Dictionary<string,object>{{"path","/home/source/Program.cs"},{"code","using SampleLibrary;\nusing System;\nusing System.Diagnostics;\nclass Program\n{\n    static void Main()\n    {\n        Console.WriteLine(42);\n        Put.WriteRandom();\n#if !EXPAND_GENERATOR\n        Console.WriteLine(24);\n#endif\n    }\n}\n#region Expanded\nnamespace SampleLibrary { public static class Put { private static readonly Xorshift rnd = new Xorshift(); public static void WriteRandom() => Trace.WriteLine(rnd.Next()); } } \nnamespace SampleLibrary { public class Xorshift : Random { private uint x = 123456789; private uint y = 362436069; private uint z = 521288629; private uint w; private static readonly Random rnd = new Random(); public Xorshift() : this(rnd.Next()) { } public Xorshift(int seed) { w = (uint)seed; } protected override double Sample() => InternalSample() * (1.0 / uint.MaxValue); private uint InternalSample() { uint t = x ^ (x << 11); x = y; y = z; z = w; return w = (w ^ (w >> 19)) ^ (t ^ (t >> 8)); } } } \n#endregion Expanded\n"},})},
{"/home/source/Program2.cs",SourceCode.FromDictionary(new Dictionary<string,object>{{"path","/home/source/Program2.cs"},{"code","using SampleLibrary;\nusing System;\nusing System.Diagnostics;\nclass Program2\n{\n    static void Main()\n    {\n        Console.WriteLine(42);\n        Put2.Write();\n    }\n}\n#region Expanded\nnamespace SampleLibrary { public static class Put2 { public static void Write() => Put.WriteRandom(); } } \nnamespace SampleLibrary { public static class Put { private static readonly Xorshift rnd = new Xorshift(); public static void WriteRandom() => Trace.WriteLine(rnd.Next()); } } \nnamespace SampleLibrary { public class Xorshift : Random { private uint x = 123456789; private uint y = 362436069; private uint z = 521288629; private uint w; private static readonly Random rnd = new Random(); public Xorshift() : this(rnd.Next()) { } public Xorshift(int seed) { w = (uint)seed; } protected override double Sample() => InternalSample() * (1.0 / uint.MaxValue); private uint InternalSample() { uint t = x ^ (x << 11); x = y; y = z; z = w; return w = (w ^ (w >> 19)) ^ (t ^ (t >> 8)); } } } \n#endregion Expanded\n"},})},
};
}}
